// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc.proto

#include "rpc.pb.h"
#include "rpc.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace etcdserverpb {

class MockKVStub : public KV::StubInterface {
 public:
  MOCK_METHOD3(Range, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::RangeRequest& request, ::etcdserverpb::RangeResponse* response));
  MOCK_METHOD3(AsyncRangeRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::RangeResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::RangeRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncRangeRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::RangeResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::RangeRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Put, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::PutRequest& request, ::etcdserverpb::PutResponse* response));
  MOCK_METHOD3(AsyncPutRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::PutResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::PutRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPutRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::PutResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::PutRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(DeleteRange, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::DeleteRangeRequest& request, ::etcdserverpb::DeleteRangeResponse* response));
  MOCK_METHOD3(AsyncDeleteRangeRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::DeleteRangeResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncDeleteRangeRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::DeleteRangeResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Txn, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::TxnRequest& request, ::etcdserverpb::TxnResponse* response));
  MOCK_METHOD3(AsyncTxnRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::TxnResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::TxnRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncTxnRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::TxnResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::TxnRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Compact, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::CompactionRequest& request, ::etcdserverpb::CompactionResponse* response));
  MOCK_METHOD3(AsyncCompactRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::CompactionResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::CompactionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncCompactRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::CompactionResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::CompactionRequest& request, ::grpc::CompletionQueue* cq));
};

class MockWatchStub : public Watch::StubInterface {
 public:
  MOCK_METHOD1(WatchRaw, ::grpc::ClientReaderWriterInterface< ::etcdserverpb::WatchRequest, ::etcdserverpb::WatchResponse>*(::grpc::ClientContext* context));
  MOCK_METHOD3(AsyncWatchRaw, ::grpc::ClientAsyncReaderWriterInterface<::etcdserverpb::WatchRequest, ::etcdserverpb::WatchResponse>*(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD2(PrepareAsyncWatchRaw, ::grpc::ClientAsyncReaderWriterInterface<::etcdserverpb::WatchRequest, ::etcdserverpb::WatchResponse>*(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq));
};

class MockLeaseStub : public Lease::StubInterface {
 public:
  MOCK_METHOD3(LeaseGrant, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::LeaseGrantRequest& request, ::etcdserverpb::LeaseGrantResponse* response));
  MOCK_METHOD3(AsyncLeaseGrantRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::LeaseGrantResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::LeaseGrantRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncLeaseGrantRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::LeaseGrantResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::LeaseGrantRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(LeaseRevoke, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::LeaseRevokeRequest& request, ::etcdserverpb::LeaseRevokeResponse* response));
  MOCK_METHOD3(AsyncLeaseRevokeRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::LeaseRevokeResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::LeaseRevokeRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncLeaseRevokeRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::LeaseRevokeResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::LeaseRevokeRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD1(LeaseKeepAliveRaw, ::grpc::ClientReaderWriterInterface< ::etcdserverpb::LeaseKeepAliveRequest, ::etcdserverpb::LeaseKeepAliveResponse>*(::grpc::ClientContext* context));
  MOCK_METHOD3(AsyncLeaseKeepAliveRaw, ::grpc::ClientAsyncReaderWriterInterface<::etcdserverpb::LeaseKeepAliveRequest, ::etcdserverpb::LeaseKeepAliveResponse>*(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD2(PrepareAsyncLeaseKeepAliveRaw, ::grpc::ClientAsyncReaderWriterInterface<::etcdserverpb::LeaseKeepAliveRequest, ::etcdserverpb::LeaseKeepAliveResponse>*(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(LeaseTimeToLive, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::LeaseTimeToLiveRequest& request, ::etcdserverpb::LeaseTimeToLiveResponse* response));
  MOCK_METHOD3(AsyncLeaseTimeToLiveRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::LeaseTimeToLiveResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::LeaseTimeToLiveRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncLeaseTimeToLiveRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::LeaseTimeToLiveResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::LeaseTimeToLiveRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(LeaseLeases, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::LeaseLeasesRequest& request, ::etcdserverpb::LeaseLeasesResponse* response));
  MOCK_METHOD3(AsyncLeaseLeasesRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::LeaseLeasesResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::LeaseLeasesRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncLeaseLeasesRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::LeaseLeasesResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::LeaseLeasesRequest& request, ::grpc::CompletionQueue* cq));
};

class MockClusterStub : public Cluster::StubInterface {
 public:
  MOCK_METHOD3(MemberAdd, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::MemberAddRequest& request, ::etcdserverpb::MemberAddResponse* response));
  MOCK_METHOD3(AsyncMemberAddRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::MemberAddResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::MemberAddRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncMemberAddRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::MemberAddResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::MemberAddRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(MemberRemove, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::MemberRemoveRequest& request, ::etcdserverpb::MemberRemoveResponse* response));
  MOCK_METHOD3(AsyncMemberRemoveRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::MemberRemoveResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::MemberRemoveRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncMemberRemoveRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::MemberRemoveResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::MemberRemoveRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(MemberUpdate, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::MemberUpdateRequest& request, ::etcdserverpb::MemberUpdateResponse* response));
  MOCK_METHOD3(AsyncMemberUpdateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::MemberUpdateResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::MemberUpdateRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncMemberUpdateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::MemberUpdateResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::MemberUpdateRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(MemberList, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::MemberListRequest& request, ::etcdserverpb::MemberListResponse* response));
  MOCK_METHOD3(AsyncMemberListRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::MemberListResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::MemberListRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncMemberListRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::MemberListResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::MemberListRequest& request, ::grpc::CompletionQueue* cq));
};

class MockMaintenanceStub : public Maintenance::StubInterface {
 public:
  MOCK_METHOD3(Alarm, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AlarmRequest& request, ::etcdserverpb::AlarmResponse* response));
  MOCK_METHOD3(AsyncAlarmRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AlarmResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AlarmRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncAlarmRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AlarmResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AlarmRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Status, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::StatusRequest& request, ::etcdserverpb::StatusResponse* response));
  MOCK_METHOD3(AsyncStatusRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::StatusResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::StatusRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncStatusRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::StatusResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::StatusRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Defragment, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::DefragmentRequest& request, ::etcdserverpb::DefragmentResponse* response));
  MOCK_METHOD3(AsyncDefragmentRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::DefragmentResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::DefragmentRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncDefragmentRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::DefragmentResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::DefragmentRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Hash, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::HashRequest& request, ::etcdserverpb::HashResponse* response));
  MOCK_METHOD3(AsyncHashRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::HashResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::HashRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncHashRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::HashResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::HashRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(HashKV, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::HashKVRequest& request, ::etcdserverpb::HashKVResponse* response));
  MOCK_METHOD3(AsyncHashKVRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::HashKVResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::HashKVRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncHashKVRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::HashKVResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::HashKVRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(SnapshotRaw, ::grpc::ClientReaderInterface< ::etcdserverpb::SnapshotResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::SnapshotRequest& request));
  MOCK_METHOD4(AsyncSnapshotRaw, ::grpc::ClientAsyncReaderInterface< ::etcdserverpb::SnapshotResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::SnapshotRequest& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncSnapshotRaw, ::grpc::ClientAsyncReaderInterface< ::etcdserverpb::SnapshotResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::SnapshotRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(MoveLeader, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::MoveLeaderRequest& request, ::etcdserverpb::MoveLeaderResponse* response));
  MOCK_METHOD3(AsyncMoveLeaderRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::MoveLeaderResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::MoveLeaderRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncMoveLeaderRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::MoveLeaderResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::MoveLeaderRequest& request, ::grpc::CompletionQueue* cq));
};

class MockAuthStub : public Auth::StubInterface {
 public:
  MOCK_METHOD3(AuthEnable, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AuthEnableRequest& request, ::etcdserverpb::AuthEnableResponse* response));
  MOCK_METHOD3(AsyncAuthEnableRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthEnableResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthEnableRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncAuthEnableRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthEnableResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthEnableRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(AuthDisable, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AuthDisableRequest& request, ::etcdserverpb::AuthDisableResponse* response));
  MOCK_METHOD3(AsyncAuthDisableRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthDisableResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthDisableRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncAuthDisableRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthDisableResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthDisableRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Authenticate, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AuthenticateRequest& request, ::etcdserverpb::AuthenticateResponse* response));
  MOCK_METHOD3(AsyncAuthenticateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthenticateResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthenticateRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncAuthenticateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthenticateResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthenticateRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(UserAdd, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserAddRequest& request, ::etcdserverpb::AuthUserAddResponse* response));
  MOCK_METHOD3(AsyncUserAddRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthUserAddResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserAddRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncUserAddRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthUserAddResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserAddRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(UserGet, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserGetRequest& request, ::etcdserverpb::AuthUserGetResponse* response));
  MOCK_METHOD3(AsyncUserGetRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthUserGetResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserGetRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncUserGetRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthUserGetResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserGetRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(UserList, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserListRequest& request, ::etcdserverpb::AuthUserListResponse* response));
  MOCK_METHOD3(AsyncUserListRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthUserListResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserListRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncUserListRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthUserListResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserListRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(UserDelete, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserDeleteRequest& request, ::etcdserverpb::AuthUserDeleteResponse* response));
  MOCK_METHOD3(AsyncUserDeleteRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthUserDeleteResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserDeleteRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncUserDeleteRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthUserDeleteResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserDeleteRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(UserChangePassword, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserChangePasswordRequest& request, ::etcdserverpb::AuthUserChangePasswordResponse* response));
  MOCK_METHOD3(AsyncUserChangePasswordRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthUserChangePasswordResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserChangePasswordRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncUserChangePasswordRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthUserChangePasswordResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserChangePasswordRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(UserGrantRole, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserGrantRoleRequest& request, ::etcdserverpb::AuthUserGrantRoleResponse* response));
  MOCK_METHOD3(AsyncUserGrantRoleRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthUserGrantRoleResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserGrantRoleRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncUserGrantRoleRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthUserGrantRoleResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserGrantRoleRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(UserRevokeRole, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserRevokeRoleRequest& request, ::etcdserverpb::AuthUserRevokeRoleResponse* response));
  MOCK_METHOD3(AsyncUserRevokeRoleRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthUserRevokeRoleResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserRevokeRoleRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncUserRevokeRoleRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthUserRevokeRoleResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthUserRevokeRoleRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(RoleAdd, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleAddRequest& request, ::etcdserverpb::AuthRoleAddResponse* response));
  MOCK_METHOD3(AsyncRoleAddRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthRoleAddResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleAddRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncRoleAddRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthRoleAddResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleAddRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(RoleGet, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleGetRequest& request, ::etcdserverpb::AuthRoleGetResponse* response));
  MOCK_METHOD3(AsyncRoleGetRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthRoleGetResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleGetRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncRoleGetRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthRoleGetResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleGetRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(RoleList, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleListRequest& request, ::etcdserverpb::AuthRoleListResponse* response));
  MOCK_METHOD3(AsyncRoleListRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthRoleListResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleListRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncRoleListRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthRoleListResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleListRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(RoleDelete, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleDeleteRequest& request, ::etcdserverpb::AuthRoleDeleteResponse* response));
  MOCK_METHOD3(AsyncRoleDeleteRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthRoleDeleteResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleDeleteRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncRoleDeleteRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthRoleDeleteResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleDeleteRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(RoleGrantPermission, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleGrantPermissionRequest& request, ::etcdserverpb::AuthRoleGrantPermissionResponse* response));
  MOCK_METHOD3(AsyncRoleGrantPermissionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthRoleGrantPermissionResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleGrantPermissionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncRoleGrantPermissionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthRoleGrantPermissionResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleGrantPermissionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(RoleRevokePermission, ::grpc::Status(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleRevokePermissionRequest& request, ::etcdserverpb::AuthRoleRevokePermissionResponse* response));
  MOCK_METHOD3(AsyncRoleRevokePermissionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthRoleRevokePermissionResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleRevokePermissionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncRoleRevokePermissionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::etcdserverpb::AuthRoleRevokePermissionResponse>*(::grpc::ClientContext* context, const ::etcdserverpb::AuthRoleRevokePermissionRequest& request, ::grpc::CompletionQueue* cq));
};

} // namespace etcdserverpb

